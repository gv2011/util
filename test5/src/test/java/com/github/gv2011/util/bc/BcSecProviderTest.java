package com.github.gv2011.util.bc;

import static com.github.gv2011.util.StreamUtils.readText;
import static com.github.gv2011.util.Verify.notNull;
import static com.github.gv2011.util.Verify.verify;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import java.math.BigInteger;

import org.junit.jupiter.api.Test;

import com.github.gv2011.util.sec.OpenSshPublicKey;
import com.github.gv2011.util.sec.RsaKeyPair;


class BcSecProviderTest {

  //SHA256:XuI5oPQKZJsutf3edlhjKkyVeFw7/ccTWwEE0gBa+es rsa-testkey-4096

  @Test
  void testParseOpenSshRsaPublicKey() {
    final OpenSshPublicKey key = new BcSecProvider().parseOpenSshRsaPublicKey(
      readText(()->notNull(getClass().getResourceAsStream("id_rsa.pub")))
    );
    assertThat(key.modulus(), is(MODULUS));
    assertThat(key.publicExponent(), is(BigInteger.valueOf(65537L)));
    assertThat(key.comment(), is("rsa-testkey-4096"));
  }


  @Test
  void testPrivateKeyPattern() {
    final String key = readText(()->notNull(getClass().getResourceAsStream("id_rsa")));
    System.out.println(key);
    verify(BcSecProvider.ID_RSA_PRIV_PATTERN
      .matcher(key)
      .matches()
    );
  }

  @Test
  void testParseOpenSshRsaPrivateKey() {
    final RsaKeyPair key = new BcSecProvider().parseOpenSshRsaPrivateKey(
      readText(()->notNull(getClass().getResourceAsStream("id_rsa")))
    );

    assertThat(key.getPrivate().getModulus(), is(MODULUS));
    assertThat(key.getPrivate().getPrivateExponent(), is(PRIVATE_EXPONENT));
  }


  private static final BigInteger MODULUS = new BigInteger(
      "70158376346746020839987843277230688846910302234337714400325489763040809161922675"
    + "22480554949062500047227012063947577502963316978083056189393247754308445812281692"
    + "91077217430114862632104852434778081072872916018594178006369316183902699388036397"
    + "14278558319166086894450498290466379218348514742516599491887623554066216701996752"
    + "46292389807160840048227716019479998171935070763797331488996212645360256664664073"
    + "18293643076777224942998851749913849182566730591590344605075861202430262706720581"
    + "42100359797309049010335190691112323894750290721628931398888412294222655263605217"
    + "09282350871431678587569112667957806666252166584186009203319570100713208980098067"
    + "73067825206811126865994285950025787743158177978695545148744377382855469921955675"
    + "70652539195243672730436647156153514869332255527658918586519272290635956071808167"
    + "45514386676788947191805872188641864241595508071681699952196033072739448368700959"
    + "01029050870068845094404608072454011578939963307885618634070738842384988011242655"
    + "94934396996310055300581936053476962669493149008860686772003629757374965542287949"
    + "36840441704211274463963154749429730355050865460992479844997767069066276671527130"
    + "39247181561223089418166382665569342336177812408617405423962961917681176938625055"
    + "304575620174846658785672804877491"
  );

  private static final BigInteger PRIVATE_EXPONENT = new BigInteger(
    "15163317237033797888032833454389643898439980102816371753717905911906122364069971"+
    "66824478089872831864732090458516341326895095950929359741743757843903474078887712"+
    "88332747093838014735988055332291898154579984115009494398144836948393881097423463"+
    "80409518887221386969443887926443246234009758412352966621951603580139019583982071"+
    "20040718302997233911578520279505080093784798050472363731569752262312973671767616"+
    "22594417006591864179091310795606370702755183414934791585800342340995520944036859"+
    "72104010655797244681735398454983604861485733141988693391512503104223824717050461"+
    "53335213069234081684447299943318863428660585830625489835557181181182604446765000"+
    "25740119703970574702769922698294538596487415259672865059169525130513120754794194"+
    "99266209499655525253370698437316706183991318673473418058211023061718323254104228"+
    "92460448810944216950590869037056855091078789177851224664969956447378197529242985"+
    "79156851869814317014939417601479759097006398191639444613466520764900540090906020"+
    "36131247642073871902172022098250302857897532329691347609722574758064300079678167"+
    "51329860454486499706543673278888834659640007246156390006951275061406822532803138"+
    "71620316573566571703208501555017355049322916634224510752150996483536505653557608"+
    "995544509893138975362357635460537"
  );

}
