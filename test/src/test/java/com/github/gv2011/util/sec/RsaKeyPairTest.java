package com.github.gv2011.util.sec;

/*-
 * #%L
 * util-test
 * %%
 * Copyright (C) 2016 - 2017 Vinz (https://github.com/gv2011)
 * %%
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * #L%
 */

import static com.github.gv2011.testutil.Matchers.is;
import static org.junit.Assert.assertThat;

import java.math.BigInteger;

import org.junit.Test;

import com.github.gv2011.testutil.AbstractTest;
import com.github.gv2011.util.bytes.Bytes;
import com.github.gv2011.util.sec.RsaKeyPair;

public class RsaKeyPairTest extends AbstractTest{

  @Test
  public void testParse() {
    final RsaKeyPair kp = RsaKeyPair.parse(getResourceBytes("rsaprivcrt.pkcs8"));
    assertThat(
      kp.getPrivate().getModulus(),
      is(new BigInteger(
          "64655249269410111339926705784848597308935189583670689265548979742012768031438464862044113482275610994207"
        + "10238337641691508558402689681874788877473544009018740104824504032207171831266905245048003190736548785957"
        + "68658627503168327874907219800974897468558457109634733593149934652189303251907936210120553590757993769633"
        + "54533488656879021568192271894384246339035957948849182634270854966826947240424238148725043066948656052440"
        + "05091409544617816863377148571145877147063745919259532959592654133894353373525976251644510788942000248594"
        + "43639243347475068643097903709727528393628879032534684449078187152207827329516888174488514508018936142868"
        + "32563926723382484952093567414439871587689121022184836479713327665480899173487034954710204902009610307012"
        + "01571564507961985837240566349867104140479437582290672962167849683912877975556792167536535038513062762766"
        + "90395548996297523187070135504054867628445934054362265687038915374003535744780742409774264640155724282393"
        + "46496412365400064222372841244541611682937093414983901082392795818296536294994723304323782665579224485458"
        + "30282396379698709612968672178396592518989321201225705333702296264208997135007020487489889850840177616068"
        + "57072301722007906750150901600869956653159043405688343949885382511532750057552784114649107"
      ))
    );
    assertThat(
        kp.getPrivate().getPrivateExponent(),
        is(new BigInteger(
          "62980094574208036648451729108731702757299137400734747272889838072391978551947757119307172446022746391491"
          + "633871742177387462785887255535225086157290320886178395341851398891019369598280050038698670322631572691"
          + "266422628623792304931880009772913676975594402159729575290069882170775459557652243373541489571815004599"
          + "325016251329514114162349387772486772295070535979973092802084154250426892678714030897648297267564138353"
          + "200966178041487086509423797417304367514785722782928077209717351638837184137452891118726510022418520113"
          + "577653847479264623128096963710159261066719082534864288200530571348554846284992430060925315731834349569"
          + "582934111849550336167268157784487952012897999982953496736103114806847958490634366023125126267041266682"
          + "561644006829843121688233221707464898984309793489354443994135974409163917591445035528991485107085254829"
          + "721923880289830368907320113834467343134018254291115214994394218162964209991979899549024144536803364016"
          + "141877179014804574631146046220944650907593466933798584567234160459244931526578237352105250187572473052"
          + "596022842648604113554890332806822683195816060951314242494137727927427572810922113576962156079040819087"
          + "025812945453309571447736427669426196220079375712095222235121372571398753812090906884311891658397467415"
          + "4827785"
        ))
      );
    assertThat(kp.getPrivate().getPublicExponent(), is(new BigInteger("65537")));
    assertThat(
      kp.getPrivate().getPrimeP(),
      is(new BigInteger(
        "30318723087376026054378385468877747795976318529128102779445883676530676925176021760180704522517694686565"
        + "528349057616192379333295816288838850254669516406211808995089967303809768214854433997348287396973698558"
        + "502101136386340553671077470964175559586352148945701179918238347144585852243959150497835712226557247026"
        + "150143755309480939558917490440395294281547055015380266703575927712700855980497863002843801059427740130"
        + "659305481360467307472675104355344748999342526556512376160021112917024025075280643033710932993620321073"
        + "375370825643084930074576007183044548134628997012329493334152594205172335773289561189692826429126103184"
        + "583"
      ))
    );
    assertThat(
      kp.getPrivate().getPrimeQ(),
      is(new BigInteger(
        "2132518875649185043174470545277114067363171690433145663427737967847558401812363460641141382373792901749"
        + "45366760418751224884586810468369808551574961974079883060551438801785546750220146753716488912535851804"
        + "57558425276645024139729377327636628034437677737586887192518010266043912947466159182722569568712632026"
        + "32494956757367816507354444622024591018181600582826762702324165271617679011604824677392109840123131275"
        + "98734195293140403664379073094936366415319376153519063689125958313394486440888999311577483906138717203"
        + "80106166738494277173539600952555598586465344011753345466940656452362923493582970977883197825692973808"
        + "858361429"
      ))
    );
    assertThat(
      kp.getPrivate().getPrimeExponentP(),
      is(new BigInteger(
        "1268781450774943757827458687259778615213461879518237555623667250122114752506031055426272185535758875862"
        + "10259929696840211208263266713083860156413104987557679642568219088953459374561026245756026996986343692"
        + "36698027461838835711506217414875009214599619970962735562513352837462615188117289831111488811564849765"
        + "12411605417753509962690301464963025895816051557945667057074037983724382461321270632452989905073250019"
        + "37962290326400627458744639758825098751100303030064442819846585095296223858417644177627270481719987645"
        + "28827355431592292708657586177603079209908557613788730948146606992524050094701938114950412568708632455"
        + "139935309"
      ))
    );
    assertThat(
      kp.getPrivate().getPrimeExponentQ(),
      is(new BigInteger(
        "8388269846859078265406514821657799951562507134546296299419207023992890739631188130654131818089629860109"
        + "42919223772065829424563740644842652951928062732472543054756174507717718185746244589172126840755866711"
        + "95721294109683396752686820899513959152809694431733580257857666150166475711846761000870519082631634192"
        + "38458808039456328752169038544817726148237405042142776706778561200090353119636354327859255011449135780"
        + "34967853344197394763878133773954344846501701002726390106653963312479433901411037010109702552199519477"
        + "05686386674953685896009486695443913508474617892028852830044582859371622860533043752208822001089334546"
        + "67740349"
      ))
    );
    assertThat(
      kp.getPrivate().getCrtCoefficient(),
      is(new BigInteger(
        "2922333066830192464656950659910599419436336851020947712932228232927685089834439391736304250477629401980"
        + "90373403860945939785024460138014317584371340160120368332703205338971114157954958488250920076720737487"
        + "86606241731218571416710175618636498562606119763082627132377632568107334811605019984383388476694893023"
        + "70442419280233701292391825298972045701881614833035372966627849210199446768233341100746573110534565561"
        + "98450182480837939397203757696242326884716469209234424293040583970000329826068924191931234276228159608"
        + "45185844009901839210808471696439898430343380039119227442674031035238646854670455180270883124604333311"
        + "399766786"
      ))
    );
  }

  @Test
  public void testEncode() {
    final Bytes encoded = getResourceBytes("rsaprivcrt.pkcs8");
    final RsaKeyPair kp = RsaKeyPair.parse(encoded);
    assertThat(kp.getPrivate().getFormat(), is("PKCS#8"));
    assertThat(kp.encode(), is(encoded));
  }

}
